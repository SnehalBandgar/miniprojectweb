#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define MAX_BOOKS 100
#define MAX_BORROWERS 100
#define MAX_NAME_LENGTH 50
#define MAX_TITLE_LENGTH 100

// Book structure
typedef struct {
    char title[MAX_TITLE_LENGTH];
    bool available;
} Book;

// Borrower structure
typedef struct {
    char name[MAX_NAME_LENGTH];
    int borrowedBookIndex;
} Borrower;

// Global arrays to store books and borrowers
Book books[MAX_BOOKS];
Borrower borrowers[MAX_BORROWERS];
int numBooks = 0;
int numBorrowers = 0;

// Function to add a book
void addBook() {
    if (numBooks >= MAX_BOOKS) {
        printf("Cannot add more books. Maximum limit reached.\n");
        return;
    }

    printf("Enter book title: ");
    scanf(" %[^\n]s", books[numBooks].title);
    books[numBooks].available = true;
    numBooks++;
    printf("Book added successfully.\n");
}

// Function to display all books
void displayBooks() {
    if (numBooks == 0) {
        printf("No books in the library.\n");
        return;
    }

    printf("Books in the library:\n");
    for (int i = 0; i < numBooks; i++) {
        printf("%d. %s - %s\n", i + 1, books[i].title, books[i].available ? "Available" : "Not Available");
    }
}

// Function to borrow a book
void borrowBook() {
    int bookIndex;
    char borrowerName[MAX_NAME_LENGTH];

    if (numBooks == 0) {
        printf("No books available for borrowing.\n");
        return;
    }

    displayBooks();

    printf("Enter book index to borrow: ");
    scanf("%d", &bookIndex);
    bookIndex--;

    if (bookIndex < 0 || bookIndex >= numBooks) {
        printf("Invalid book index.\n");
        return;
    }

    if (!books[bookIndex].available) {
        printf("Book is already borrowed.\n");
        return;
    }

    printf("Enter borrower name: ");
    scanf(" %[^\n]s", borrowerName);

    strcpy(borrowers[numBorrowers].name, borrowerName);
    borrowers[numBorrowers].borrowedBookIndex = bookIndex;
    books[bookIndex].available = false;

    printf("Book borrowed successfully.\n");
    numBorrowers++;
}

// Function to return a book
void returnBook() {
    int borrowerIndex;

    if (numBorrowers == 0) {
        printf("No books borrowed.\n");
        return;
    }

    printf("Borrowers:\n");
    for (int i = 0; i < numBorrowers; i++) {
        printf("%d. %s\n", i + 1, borrowers[i].name);
    }

    printf("Enter borrower index to return book: ");
    scanf("%d", &borrowerIndex);
    borrowerIndex--;

    if (borrowerIndex < 0 || borrowerIndex >= numBorrowers) {
        printf("Invalid borrower index.\n");
        return;
    }

    int bookIndex = borrowers[borrowerIndex].borrowedBookIndex;
    books[bookIndex].available = true;

    printf("Book returned successfully.\n");
}

int main() {
    int choice;

    do {
        printf("\nLibrary Management System\n");
        printf("1. Add Book\n");
        printf("2. Display Books\n");
        printf("3. Borrow Book\n");
        printf("4. Return Book\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addBook();
                break;
            case 2:
                displayBooks();
                break;
            case 3:
                borrowBook();
                break;
            case 4:
                returnBook();
                break;
            case 5:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}
